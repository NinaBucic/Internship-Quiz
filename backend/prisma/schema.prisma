// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String           @id @default(uuid())
  username    String           @unique
  email       String           @unique
  password    String
  role        Role             @default(User)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  totalPoints Int              @default(0)
  quizAnswers UserQuizAnswers[]
}

model Category {
  id        String     @id @default(uuid())
  title     String     @unique
  imageUrl  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  questions Question[]
  quizzes   Quiz[]
}

model Quiz {
  id              String            @id @default(uuid())
  title           String
  categoryId      String
  category        Category          @relation(fields: [categoryId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  quizQuestions   QuizQuestion[]
  userQuizAnswers UserQuizAnswers[]
}

model Question {
  id            String         @id @default(uuid())
  title         String
  type          QuestionType
  categoryId    String
  category      Category       @relation(fields: [categoryId], references: [id])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  options       Json?
  correctAnswer Json
  quizQuestions QuizQuestion[]
}

model UserQuizAnswers {
  id        String   @id @default(uuid())
  userId    String
  quizId    String
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quiz      Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QuizQuestion {
  id         String   @id @default(uuid())
  quizId     String
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  quiz       Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

enum QuestionType {
  TrueFalse
  MultipleChoice
  ShortAnswer
}

enum Role {
  User
  Admin
}